security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    guest: { password: '$2a$12$3dBleOLu6K8HiiFG0skEv.y1xe6KrGcggOjniSwja4c0v3xH9nmE2', roles: [ 'ROLE_API' ] } # EZjxX3BayZSC
        users_in_db:
            entity:
                class: App\Security\Entity\User
        all_users:
            chain:
                providers: [ users_in_memory, users_in_db ]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_login:
            pattern: ^/api/login/check
            stateless: true
            json_login:
                provider: all_users
                check_path: /api/login/check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            provider: all_users
            stateless: true
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login/check, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, roles: PUBLIC_ACCESS }
        - { path: ^/api/firm_management, roles: [ROLE_MANAGER, ROLE_ADMIN] }
        - { path: ^/api$, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: [ROLE_USER, ROLE_MANAGER, ROLE_ADMIN] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

        providers:
            users_in_memory:
                memory:
                    users:
                        admin: { password: '$2a$12$3dBleOLu6K8HiiFG0skEv.y1xe6KrGcggOjniSwja4c0v3xH9nmE2', roles: [ 'ROLE_API', 'ROLE_ADMIN' ] } # EZjxX3BayZSC
